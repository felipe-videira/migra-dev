body {
    /* 
        Remove a margin padrão da tag body. 
        
        A maioria das tags tem um estilo padrão aplicado a elas pelo navegador, que as vezes é bom e outras vezes atrapalha, 
        por isso quando estamos desenvolvendo um site por completo, que vai ter sua própria indentidade visual para cada 
        elemento (botões, listas, campos de texto e etc) é uma boa ideia usar um conceito chamado CSS Reset, que fizemos 
        aqui parcialmente, em que a ideia é ter um arquivo que sobrescreve todo o estilo padrão. Um bom ponto de partida:
       
        https://meyerweb.com/eric/tools/css/reset/
    */
    margin: 0;

    font-family: Verdana, Geneva, Tahoma, sans-serif;
}


.grid-tabela {
    /* 
        O 'display: grid' (grade) funciona semelhante ao 'display: flex', quando um elemento está com seu display em grid 
        ou flex ele assume o controle do posicionamento dos filhos e 'libera' algumas propriedades do CSS específicas para serem usadas 
        por ele e os filhos. 
        
        A ideia do grid é posicionar os elementos em um layout de grade, sendo mais indicado para layouts mais 
        complexos como definir o layout de uma página inteira por exemplo, mas ele não substitui o flex, pois o flex ainda é a melhor opção para
        situações mais simples como alinhar elementos na mesma linha, e na verdade, muito frequentemente, você irá usar eles em conjuinto.
        
        Como via de regra pense assim: se for para lidar com alinhamento de items na mesma linha 
        (que pode quebrar para outras linhas sendo responsivo ou não) use o flex, se for para alinhar 
        elementos em multiplas linhas ou linhas e colunas ao mesmo tempo use o grid.
    */
    display: grid;


    /* define as colunas (columns) do grid e seus tamanhos, nesse caso 3 colunas de 200 pixels */
    grid-template-columns: 200px 200px 200px;

    
    /* define as linhas (rows) do grid e seus tamanhos, nesse caso 2 linhas de 100 pixels */
    grid-template-rows: 100px 100px;


    /* Porém você não precisa ficar repetindo o tamanho de cada linha na mão, você pode usar o repeat(nº, tamanho). */
    grid-template-columns: repeat(4, 200px);
    grid-template-rows: repeat(2, 100px);


    /* 
        Só que dessa forma o grid ainda não esta responsivo, pois o numero de linhas e colunas está fixo, 
        se substituirmos o numero fixo pela palavra-chave 'auto-fit' (ajuste automático), o navegar vai reoganizar as linhas 
        e colunas para sempre caberem na tela dado ao tamanho que passamos para cada item 
    */
    grid-template-columns: repeat(auto-fit, 200px);


    /* 
        Mas nesse caso o 'grid-template-rows' não surte o efeito desejado, pois ele é para linhas explícitas, 
        como são chamadas as definidas manualmente. Precisamos do 'grid-auto-rows' que define o tamanho de 
        linhas implícitas, aquelas que o navegador cria. 
    */
    grid-auto-rows: 100px;


    /* 
        Digamos que você não queira que a grade quebre, mas sim que ela 
        flexione e mantenha a estrutura descrita, poderia ser usado porcentagem como abaixo 
    */
    grid-template-columns: repeat(4, 25%);

    /* 
        Esse layout talvez não fique bom no mobile nessas mesmas proporções, e ele tenha que quebrar em um certo ponto. 
        Você não precisa de um media query para isso. Na linha abaixo o 'auto-fit' esta criando colunas com o minimo de 
        200px e o maximo de 1 fração do espaço.

        'fr' é uma unidade de medida relativa que calcula automaticamente as frações de espaço disponíveis, 
        ela so pode ser usada em conjunto com o grid, pois ela usa o numero de elementos na linha para fazer a conta, 
        por exemplo:

        Em repeat(4, 1fr) 1fr é igual a: 100% / 4 (25%).

        Em repeat(auto-fit, minmax(10px, 1fr)), com 3 elementos no HTML, 1fr é igual a: 100% / 3 (33.3%), 
        se sobrar espaço na linha, ou seja: 100% - (3 * 10px) > 0, se não o tamanho das colunas será 10 pixels.
    */
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));


    /* 
        O 'auto-fit' sempre tenta fazer as colunas preencherem o espaço disponível até que elas quebrem, semelhante ao flex.
        Caso você precise que elas preservem o tamanho original após sobrar espaço use o 'auto-fill' (preenchimento automático). 
        O 'auto-fill' cria colunas vazias para preencher o espaço restante, inspecionado o HTML você consegue observar isso melhor 

        Para usar o 'auto-fit' ou o 'auto-fill' as colunas precisam ter alguma valor absoluto, 
        Assim: repeat(auto-fit, 200px) 
        Ou assim: repeat(auto-fit, minmax(200px, 1fr)) 
        Mas assim não funcionaria: repeat(auto-fit, 1fr), pois ambos os valores (auto-fit, 1fr) são relativos, e sem um ponto de partida absoluto. 
    */
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));

    
    /* 
        Define o espaçamento entre as linhas e colunas, respectivamente 
    */
    grid-gap: 10px 15px;


    /* 
        Define o alinhamento vertical e horizontal da grade, respectivamente ou apenas um valor para os dois 
        start (padrão), end, center, space-between, space-around, space-evenly, stretch e etc (usa os mesmos valores do align-items e justify-content do flex)
    */
    place-content: center;  


    /* 
        Define o alinhamento vertical e horizontal dos items da grade, respectivamente ou apenas um valor para os dois  
        stretch (padrão), start, end, center, space-between, space-around, space-evenly e etc
    */
    place-items: stretch end;
}


.grid-tabela div {
    border: 1px solid;
}

.grid-areas {
    display: grid;

    /* 
        O 'grid-template-areas' define as colunas e linhas através de áreas nomeadas, as linhas são 
        strings separadas por espaço ou quebra de linha (fica melhor de visualizar mas não é necessário), e as 
        colunas pelos nomes das áreas separados por espaço
    */
    grid-template-areas: 
        "imagem descricao"
        "imagem autor";
} 

.grid-areas div {
    border: 1px solid;
}

.imagem {
    /* Define de qual área do grid esse elemento faz parte */
    grid-area: imagem;
}

.descricao {
    grid-area: descricao;
}

.autor {
    grid-area: autor;
}


.grid-template {
    display: grid;

    /* 
        O 'grid-template' é uma mistura dos anteriores, onde você pode definir as áreas e os tamanhos das linhas e colunas, 
        indicado para definir o layout de páginas. Após cada declaração de área vem o tamanho daquela linha e no final apos o 
        '/' vem o tamanho das colunas. No exemplo abaixo a linha e coluna do conteúdo são declaradas com a palavra-chave 'auto', 
        que faz com que a largura se ajuste no espaço disponivel e altura conforme o tamanho do conteúdo, esse é geralmente o comportamento 
        desejado em um layout para uma página 
    */
    grid-template:
        'cabecalho cabecalho' 75px
        'menu conteudo' auto
        'rodape rodape' 35px 
        / 200px auto;


    /* 
        Porém dessa forma o rodapé nen sempre fica no final da página. Podemos usar o minmax para definir um tamanho 
        mínimo para o conteúdo, esse tamanho mínimo precisa ser o tamanho da tela menos o tamanho do cabeçalho (75px) e rodapé (35px),
        podemos fazer isso usando o 'vh', uma unidade de medida que representa uma porcentagem do viewport (janela de exibição do navegador), 
        sendo assim 100vh = 100% do tamanho da janela, usando o calc() podemos realizar calculos entre valores variáveis (%, vh) e absolutos (px), 
        exp: calc(100% - 35px)
    */
    grid-template:
        'cabecalho cabecalho' 75px
        'menu conteudo' minmax(calc(100vh - 110px), auto)
        'rodape rodape' 35px 
        / 200px auto;


    /* 
        Desse jeito o menu vai ser sempre 200px. Podemos definir as colunas em 
        porcentagem e usar o minmax para manter as mesmas proporções se a tela for maior.
    */
    grid-template:
        'cabecalho cabecalho' 75px
        'menu conteudo' minmax(calc(100vh - 110px), auto)
        'rodape rodape' 35px 
        / minmax(200px, 20%) 80%;
} 

.grid-template div {
    border: 1px solid;
}

.cabecalho { 
    grid-area: cabecalho;
}

.menu { 
    grid-area: menu; 
}

.rodape { 
    grid-area: rodape; 
}


/* 
    Para ajustar áreas ou o template para mobile use o media query para refazer o grid 
*/
@media only screen and (max-width: 728px) {
    .grid-areas {
        grid-template-areas: 
            'imagem'
            'descricao'
            'autor';
    }

    .grid-template {
        grid-template:
            'cabecalho' 75px
            'menu' 50px
            'conteudo' minmax(calc(100vh - 110px), auto)
            'rodape' 35px 
            / 1fr;
    }
}